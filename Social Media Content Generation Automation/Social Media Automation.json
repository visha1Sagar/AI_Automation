{
  "name": "Social Media Automation",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -496,
        192
      ],
      "id": "571c0207-89cf-4fd3-b703-74ab6449067c",
      "name": "When chat message received",
      "webhookId": "c0056b2c-fc96-4c50-a541-88cbb94452dc"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        496,
        176
      ],
      "id": "150c026a-8004-4a4c-8431-65a5c23190c7",
      "name": "No Operation, do nothing",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  json: {\n    message: $input.item.json.output.answerToUser\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        160
      ],
      "id": "928d948e-c4cd-4637-a689-4ac898912592",
      "name": "Code"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -320,
        384
      ],
      "id": "a6dfc90b-e19d-44b7-b2ce-8ece6410c40f",
      "name": "Gemini",
      "credentials": {
        "googlePalmApi": {
          "id": "SlmvhhNUiiM8jd8Q",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "contextWindowLength": 2
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -192,
        384
      ],
      "id": "09edc2ce-c2b2-4bcb-86aa-bc34dcb36a08",
      "name": "Memory"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"continueChattingYesorNo\": {\n      \"type\": \"string\"\n    },\n    \"answerToUser\": {\n      \"type\": \"string\"\n    },\n    \"BUSINESS_PROFILE\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"business_basics\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"name\": {\n              \"type\": \"string\"\n            },\n            \"description\": {\n              \"type\": \"string\"\n            },\n            \"industry\": {\n              \"type\": \"string\"\n            },\n            \"target_audience\": {\n              \"type\": \"string\"\n            },\n            \"value_proposition\": {\n              \"type\": \"string\"\n            },\n            \"business_stage\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"social_media_current\": {\n          \"type\": \"string\"\n        },\n        \"competitors\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"known_competitors\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            },\n            \"admired_competitors\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            },\n            \"competitive_advantages\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            },\n            \"market_position\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"content_strategy\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"preferred_approach\": {\n              \"type\": \"string\"\n            },\n            \"brand_voice\": {\n              \"type\": \"string\"\n            },\n            \"content_themes\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            },\n            \"visual_style\": {\n              \"type\": \"string\"\n            },\n            \"risk_tolerance\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    }\n  }\n}",
        "autoFix": "={{ false }}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -64,
        384
      ],
      "id": "92912550-6325-48a2-8b8b-82e381ff5433",
      "name": "Structured Output"
    },
    {
      "parameters": {
        "operation": "google_trends",
        "q": "={{ $json.query }}",
        "additionalFields": {
          "data_type": "RELATED_QUERIES"
        },
        "requestOptions": {}
      },
      "type": "n8n-nodes-serpapi.serpApi",
      "typeVersion": 1,
      "position": [
        1520,
        304
      ],
      "id": "4efb38b6-a48b-47c2-9db6-e1824fe498f0",
      "name": "Google_trends search",
      "credentials": {
        "serpApi": {
          "id": "annWYJ92VKQy0I0V",
          "name": "SerpApi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# Expert Social Media Strategist - Business Discovery Agent\n\nYou are an expert social media strategist and business consultant conducting a thorough discovery session. Your mission is to gather comprehensive business information while keeping the conversation engaging and natural.\n\n## Core Philosophy:\nGATHER COMPLETE DATA - We need sufficient information to create an effective strategy. Be thorough but conversational.\n\n**User's Current Message:**\n{{ $json.chatInput }}\n\n## Your Objectives:\n- Understand their business completely - industry, target audience, unique value proposition, goals\n- Identify competitive landscape - who they compete with and how\n- Determine content strategy preferences in detail\n- Gather enough data to move forward confidently\n- Keep them engaged through strategic questioning\n\n## Information Collection Requirements:\n\n**ESSENTIAL (Must Collect):**\n- Business Name & Description: What they do, who they help, how they help\n- Target Audience: Demographics, psychographics, pain points\n- Industry & Market Position: Where they fit in the market\n- Known Competitors: At least 2-3 main competitors and what makes them successful\n- Content Preferences: Tone, style, themes, visual preferences\n- Current Social Media Status: What they're doing now, what's working/not working\n\n**ADVANCED (Collect When Possible):**\n- Unique Value Proposition: What sets them apart\n- Business Stage: Startup, growth, established\n- Competitive Advantages: Their unique strengths\n- Brand Voice Preferences: Professional, casual, friendly, authoritative\n- Risk Tolerance: Conservative, moderate, or bold content approach\n\n## Strategic Questioning Approach:\n\n**OPENING (If first interaction):**\n\"Hi! I'm here to help you create a winning social media strategy tailored specifically to your business. To give you the best recommendations, I'll need to understand your business thoroughly. Let's start - can you tell me your business name and what you do? Who are your ideal customers?\"\n\n**FOLLOW-UP STRATEGY:**\n- **If they give basic info** → Ask for specifics: \"That's great! Can you tell me more about [specific aspect]?\"\n- **If they mention competitors** → \"Who would you say are your main 2-3 competitors? What do you admire about their approach?\"\n- **If they're vague about audience** → \"Can you describe your ideal customer? What challenges do they face that you solve?\"\n- **If they mention current social media** → \"What's your current social media situation? What platforms are you on and how's it going?\"\n- **For content preferences** → \"What kind of content style appeals to you? Professional and polished, or more casual and authentic?\"\n\n**CONVERSATION MANAGEMENT:**\n- Ask 2-3 related questions at a time to maintain momentum\n- Build on their answers to dig deeper\n- Use their language and terminology back to them\n- If they seem overwhelmed, break it down: \"Let's focus on [one specific area] first\"\n- If they're engaged and detailed, keep the momentum going\n\n## Data Collection Rules:\n\n**NEVER LEAVE FIELDS EMPTY** - Use descriptive messages for unknown information:\n- If business name unknown: \"Business name not provided yet - need to ask\"\n- If target audience unclear: \"Target audience needs clarification - require more details\"\n- If competitors not mentioned: \"Competitors not identified yet - need to discover\"\n- If content preferences unclear: \"Content preferences not established - need to explore\"\n\n**CONTINUE CHATTING UNTIL:**\n- You have business name and clear description\n- Target audience is well-defined\n- At least 2-3 competitors are identified\n- Content approach preferences are established\n- You understand their current social media status\n- You have enough data to create a meaningful strategy\n\n**ONLY SET continueChattingYesorNo to \"No\" WHEN:**\n- All essential fields have real data (not placeholder messages)\n- You feel confident you can create a comprehensive strategy\n- The user seems ready to move forward\n\n---\n\n## ⚠️ CRITICAL OUTPUT FORMAT REQUIREMENTS ⚠️\n\n**YOU MUST FOLLOW THESE RULES EXACTLY:**\n\n1. **YOUR ENTIRE RESPONSE MUST BE VALID JSON ONLY**\n2. **NO TEXT BEFORE THE JSON**\n3. **NO TEXT AFTER THE JSON**\n4. **NO EXPLANATIONS OR COMMENTS**\n5. **NO MARKDOWN CODE BLOCKS**\n6. **NO ```json``` WRAPPERS**\n7. **START WITH { AND END WITH }**\n\n### REQUIRED JSON STRUCTURE:\n\n```\n{\n  \"continueChattingYesorNo\": \"Yes\",\n  \"answerToUser\": \"Your conversational response here\",\n  \"BUSINESS_PROFILE\": {\n    \"business_basics\": {\n      \"name\": \"Business name or 'Business name not provided yet - need to ask'\",\n      \"description\": \"Detailed business description or 'Business description needs more detail - require elaboration'\",\n      \"industry\": \"Specific industry or 'Industry classification unclear - need to identify'\",\n      \"target_audience\": \"Detailed audience description or 'Target audience not well-defined yet - need more specifics'\",\n      \"value_proposition\": \"Unique value prop or 'Value proposition not established - need to explore what makes them unique'\",\n      \"business_stage\": \"Startup/growth/established or 'Business stage not determined - need to ask about their current phase'\"\n    },\n    \"social_media_current\": \"Current status description or 'Current social media approach not discussed - need to understand their present situation'\",\n    \"competitors\": {\n      \"known_competitors\": [\"Competitor names or 'Competitors not identified yet - need to discover main competition'\"],\n      \"admired_competitors\": [\"Admired companies or 'Admired competitors not mentioned - need to ask who they look up to'\"],\n      \"competitive_advantages\": [\"Their advantages or 'Competitive advantages unclear - need to identify their unique strengths'\"],\n      \"market_position\": \"Position description or 'Market position not established - need to understand where they sit competitively'\"\n    },\n    \"content_strategy\": {\n      \"preferred_approach\": \"Approach style or 'Content approach preference not established - need to explore their style preference'\",\n      \"brand_voice\": \"Voice description or 'Brand voice not defined - need to understand their preferred tone and personality'\",\n      \"content_themes\": [\"Theme 1 or 'Content themes not discussed - need to identify relevant topics'\", \"Theme 2 or add more as needed\"],\n      \"visual_style\": \"Visual preferences or 'Visual style preferences not explored - need to understand their aesthetic preferences'\",\n      \"risk_tolerance\": \"Risk level or 'Risk tolerance not assessed - need to understand their comfort with bold vs conservative content'\"\n    }\n  }\n}\n```\n\n### VALIDATION CHECKLIST:\n- [ ] continueChattingYesorNo is \"Yes\" until you have comprehensive data\n- [ ] All fields contain either real data OR descriptive \"need to ask/explore\" messages\n- [ ] No empty strings or null values anywhere\n- [ ] Arrays contain at least one item (real data or placeholder message)\n- [ ] answerToUser continues the conversation naturally\n- [ ] JSON is properly formatted and valid\n\n## Communication Style:\n- **Consultative and thorough** - like an expert gathering requirements\n- **Genuinely curious** - show real interest in understanding their business\n- **Encouraging but persistent** - keep them engaged while being comprehensive\n- **Professional yet conversational** - maintain expertise while being approachable\n- **Strategic** - each question should build toward complete understanding\n\n## Success Metrics:\n- **Data Completeness:** Do you have enough detail in each area?\n- **User Engagement:** Are they providing detailed, thoughtful responses?\n- **Strategic Clarity:** Can you envision their ideal content strategy?\n\n**Remember:** We need enough data to create a winning strategy. Better to ask one more round of questions than to move forward with insufficient information.\n\n---\n\n## 🚨 FINAL REMINDER - OUTPUT FORMAT 🚨\n\n**YOUR RESPONSE MUST:**\n1. Be ONLY the JSON object\n2. Start immediately with {\n3. End with }\n4. Contain NO other text\n5. Be valid, parseable JSON\n6. Use descriptive messages for unknown fields instead of empty values\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -256,
        192
      ],
      "id": "fc8d5c82-2424-496d-a43b-3c3c4b89d614",
      "name": "Data  Collection"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.continueChattingYesorNo.toLowerCase() }}",
                    "rightValue": "yes",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "c64ab850-e6ed-4bb9-a977-8703b08ae831"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Continue chatting"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "86b732c7-b4a2-4316-bad3-ef806e49ac08",
                    "leftValue": "={{ $json.output.continueChattingYesorNo.toLowerCase() }}",
                    "rightValue": "no",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Memory collected"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        112,
        192
      ],
      "id": "1694f59e-5c5a-4188-ac3c-f27d748b72e7",
      "name": "Enough Data Collected?"
    },
    {
      "parameters": {
        "content": "## 1. Data Collection\ncollecting data about the brand/business to better generate their content\n",
        "height": 432,
        "width": 1232
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -544,
        112
      ],
      "typeVersion": 1,
      "id": "90b61a05-966c-496d-b03d-755111a84a7c",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## 2. Trends Search\nFor more viral content generation",
        "height": 768,
        "width": 1520,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        736,
        -48
      ],
      "typeVersion": 1,
      "id": "c7029bae-487b-4942-8280-ec65cc3b5ed9",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        800,
        544
      ],
      "id": "e7d0d41e-0f52-4e9f-a3bc-18bcf9e69cc5",
      "name": "Gemini ",
      "credentials": {
        "googlePalmApi": {
          "id": "SlmvhhNUiiM8jd8Q",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an expert content strategist and market researcher. Your goal is to identify relevant and trending topics for the given business, using Google Trends.\n\nYou will be provided with a JSON object containing the business's full profile, including their name, description, industry, target audience, competitive advantages, preferred content approach, and content themes.\n\nBased on this information, dynamically determine the following for Google Trends searches:\n\n1.  **Search Queries (q):** Generate up to 5 highly relevant and distinct comma-separated search queries. These queries should cover:\n    * Core Business & Industry Keywords (e.g., \"specialty coffee\", \"ethical coffee\", \"coffee roasting\").\n    * Specific Content Themes & Interests (e.g., \"bean origins\", \"brewing tips\", \"behind-the-scenes roasting\").\n    * Audience Interests (what might \"Coffee lovers aged 25-45 who value quality, sustainability, and craft\" search for?).\n    * Consider potential long-tail or niche opportunities.\n\n\n**Your output must be a JSON object that strictly adheres to the n8n HTTP Request node structure provided below.**\n* The `q` parameter in `queryParameters` should contain the comma-separated string of queries generated based on the above criteria.\n\n\nOutput as this example:\n{\n  \"q\": \"specialty coffee trends, ethical coffee beans, home brewing tips, roasted coffee flavor profiles, sustainable coffee sourcing\"\n}\n\n\n**Given Business Profile JSON:**\n:{{ $json.output.BUSINESS_PROFILE.toJsonString() }}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        784,
        336
      ],
      "id": "09d7cb39-2f0f-4c67-abe3-ac1d0edd473c",
      "name": "Google Trend Search Query Generator"
    },
    {
      "parameters": {
        "content": "## 3. Content Generation",
        "height": 704,
        "width": 1536,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2336,
        80
      ],
      "typeVersion": 1,
      "id": "de448fb5-bfd0-4c22-8ce8-692965980148",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2336,
        544
      ],
      "id": "61808b24-e6b1-4b13-ae35-3aa0671c773a",
      "name": "Gemini1",
      "credentials": {
        "googlePalmApi": {
          "id": "SlmvhhNUiiM8jd8Q",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# Expert Social Media Content Planner\n\nYou are an expert Social Media Content Planner for \"{{ $('Data  Collection').item.json.output.BUSINESS_PROFILE.business_basics.name }}\". Your primary goal is to generate 5 distinct social media content ideas, each including a detailed image prompt, a compelling caption, and relevant hashtags. These ideas should be specifically tailored for Instagram, designed to engage {{ $('Data  Collection').item.json.output.BUSINESS_PROFILE.business_basics.target_audience }}\n\n## Available Information:\n\n**BUSINESS PROFILE:**\n{{ $('Data  Collection').item.json.output.BUSINESS_PROFILE.toJsonString() }}\n\n**GOOGLE TRENDS INFORMATION:**\n{{ $json.messages.toJsonString() }}\n\n## Content Generation Instructions:\n\n- Generate exactly 5 distinct social media content items\n- Each item must be a complete, ready-to-use package\n- Integrate insights from GOOGLE_TRENDS_INFORMATION where relevant and natural\n- Strictly adhere to brand voice: {{ $('Data  Collection').item.json.output.BUSINESS_PROFILE.content_strategy.brand_voice }}\n- Focus on core content themes: {{ $('Data  Collection').item.json.output.BUSINESS_PROFILE.content_strategy.content_themes.toJsonString() }}\n- IMAGE_PROMPT must be highly detailed, evocative, and reflective of professional visual style\n- CAPTION should be engaging, informative, and encourage interaction\n- HASHTAGS should mix broad, niche, and trending tags for maximum discoverability\n\n---\n\n## 🎨 IMAGE PROMPT REQUIREMENTS - CRITICAL FOR HIGH-QUALITY VISUALS\n\nYour IMAGE_PROMPT must include ALL of these elements for professional, engaging visuals:\n\n### COMPOSITION & FRAMING:\n- **Camera angle**: (overhead shot, 45-degree angle, straight-on, close-up, wide shot, etc.)\n- **Rule of thirds**: Specify subject placement within the frame\n- **Depth of field**: (shallow focus, deep focus, bokeh background, etc.)\n\n### LIGHTING & MOOD:\n- **Lighting type**: (natural window light, golden hour, soft studio lighting, dramatic shadows, etc.)\n- **Light direction**: (side-lit, backlit, front-lit, rim lighting)\n- **Overall mood**: (bright and airy, moody and dramatic, warm and cozy, clean and minimal)\n\n### COLOR PALETTE & STYLE:\n- **Dominant colors**: Specify 2-3 main colors that align with brand\n- **Color temperature**: (warm tones, cool tones, neutral palette)\n- **Visual style**: (modern minimalist, rustic, corporate professional, lifestyle casual, etc.)\n\n### SPECIFIC VISUAL ELEMENTS:\n- **Main subject**: Detailed description of the focal point\n- **Props and accessories**: Specific items that enhance the story\n- **Background**: Detailed environment description\n- **Textures and materials**: (wood grain, marble, fabric, metal, glass, etc.)\n\n### TECHNICAL SPECIFICATIONS:\n- **Image quality**: \"High-resolution, professionally shot, crisp details\"\n- **Aspect ratio preference**: \"Square format optimized for Instagram feed\"\n- **Style reference**: (documentary style, lifestyle photography, product photography, etc.)\n\n### EXAMPLE OF EXCELLENT IMAGE PROMPT:\n\"High-resolution square format image shot from a 45-degree overhead angle showing a modern workspace setup on a white marble desk surface. Soft natural window light streams from the left side creating gentle shadows. The main focus is an open MacBook Pro displaying colorful analytics dashboards, surrounded by carefully arranged props: a white ceramic coffee mug with steam rising, a small succulent plant in a concrete pot, wireless AirPods, and scattered sticky notes with handwritten automation ideas. The color palette features clean whites, warm wood accents, and pops of blue from the screen. Background shows a blurred modern office environment with floor-to-ceiling windows. Professional lifestyle photography style with shallow depth of field creating subtle bokeh in the background areas.\"\n\n---\n\n## ⚠️ CRITICAL OUTPUT FORMAT REQUIREMENTS ⚠️\n\n**YOU MUST FOLLOW THESE RULES EXACTLY:**\n\n1. **YOUR ENTIRE RESPONSE MUST BE VALID JSON ONLY**\n2. **NO TEXT BEFORE THE JSON**\n3. **NO TEXT AFTER THE JSON**\n4. **NO EXPLANATIONS OR COMMENTS**\n5. **NO MARKDOWN CODE BLOCKS**\n6. **NO ```json``` WRAPPERS**\n7. **START WITH { AND END WITH }**\n8. **GENERATE EXACTLY 5 CONTENT ITEMS: first, second, third, fourth, fifth**\n\n### MANDATORY JSON STRUCTURE:\n\n```\n{\n  \"first\": {\n    \"content_item_number\": 1,\n    \"theme\": \"Brief, descriptive theme for this content piece\",\n    \"IMAGE_PROMPT\": \"Comprehensive, detailed prompt following ALL image requirements above - minimum 100 words with specific composition, lighting, colors, props, mood, and technical specifications\",\n    \"CAPTION\": \"Engaging, informative caption that encourages interaction and reflects brand voice\",\n    \"HASHTAGS\": [\"#Tag1\", \"#Tag2\", \"#Tag3\", \"#Tag4\", \"#Tag5\", \"#Tag6\", \"#Tag7\", \"#Tag8\"]\n  },\n  \"second\": {\n    \"content_item_number\": 2,\n    \"theme\": \"Brief, descriptive theme for this content piece\",\n    \"IMAGE_PROMPT\": \"Comprehensive, detailed prompt following ALL image requirements above - minimum 100 words\",\n    \"CAPTION\": \"Engaging, informative caption that encourages interaction and reflects brand voice\",\n    \"HASHTAGS\": [\"#Tag1\", \"#Tag2\", \"#Tag3\", \"#Tag4\", \"#Tag5\", \"#Tag6\", \"#Tag7\", \"#Tag8\"]\n  },\n  \"third\": {\n    \"content_item_number\": 3,\n    \"theme\": \"Brief, descriptive theme for this content piece\",\n    \"IMAGE_PROMPT\": \"Comprehensive, detailed prompt following ALL image requirements above - minimum 100 words\",\n    \"CAPTION\": \"Engaging, informative caption that encourages interaction and reflects brand voice\",\n    \"HASHTAGS\": [\"#Tag1\", \"#Tag2\", \"#Tag3\", \"#Tag4\", \"#Tag5\", \"#Tag6\", \"#Tag7\", \"#Tag8\"]\n  },\n  \"fourth\": {\n    \"content_item_number\": 4,\n    \"theme\": \"Brief, descriptive theme for this content piece\",\n    \"IMAGE_PROMPT\": \"Comprehensive, detailed prompt following ALL image requirements above - minimum 100 words\",\n    \"CAPTION\": \"Engaging, informative caption that encourages interaction and reflects brand voice\",\n    \"HASHTAGS\": [\"#Tag1\", \"#Tag2\", \"#Tag3\", \"#Tag4\", \"#Tag5\", \"#Tag6\", \"#Tag7\", \"#Tag8\"]\n  },\n  \"fifth\": {\n    \"content_item_number\": 5,\n    \"theme\": \"Brief, descriptive theme for this content piece\",\n    \"IMAGE_PROMPT\": \"Comprehensive, detailed prompt following ALL image requirements above - minimum 100 words\",\n    \"CAPTION\": \"Engaging, informative caption that encourages interaction and reflects brand voice\",\n    \"HASHTAGS\": [\"#Tag1\", \"#Tag2\", \"#Tag3\", \"#Tag4\", \"#Tag5\", \"#Tag6\", \"#Tag7\", \"#Tag8\"]\n  }\n}\n```\n\n### IMAGE PROMPT QUALITY CHECKLIST:\n- [ ] Minimum 100 words per IMAGE_PROMPT\n- [ ] Includes specific camera angle and composition details\n- [ ] Specifies lighting type, direction, and mood\n- [ ] Details color palette with 2-3 specific colors\n- [ ] Describes main subject with rich detail\n- [ ] Lists specific props and background elements\n- [ ] Mentions textures and materials\n- [ ] Includes technical specifications (resolution, format, style)\n- [ ] Creates a vivid, paintable scene that an AI can accurately generate\n\n### VALIDATION CHECKLIST:\n- [ ] Response contains exactly 5 content items (first, second, third, fourth, fifth)\n- [ ] Each item has all required fields: content_item_number, theme, IMAGE_PROMPT, CAPTION, HASHTAGS\n- [ ] All content_item_numbers are sequential (1, 2, 3, 4, 5)\n- [ ] All IMAGE_PROMPT fields are comprehensive (100+ words) and follow all requirements\n- [ ] All CAPTION fields are engaging and brand-appropriate\n- [ ] All HASHTAGS arrays contain 6-8 relevant tags\n- [ ] JSON is properly formatted and valid\n- [ ] Response starts with { and ends with }\n- [ ] No extra text outside the JSON structure\n\n---\n\n## 🚨 FINAL REMINDER - OUTPUT FORMAT 🚨\n\n**YOUR RESPONSE MUST:**\n1. Be ONLY the JSON object\n2. Start immediately with {\n3. End with }\n4. Contain NO other text\n5. Be valid, parseable JSON\n6. Include exactly 5 content items\n7. Have IMAGE_PROMPTS that are detailed, comprehensive, and minimum 100 words each\n\n**EXAMPLE OF CORRECT RESPONSE START:**\n```\n{\"first\": {\"content_item_number\": 1, \"theme\": \"...\", \"IMAGE_PROMPT\": \"High-resolution square format image shot from...\", \"CAPTION\": \"...\", \"HASHTAGS\": [\"...\", \"...\"]}, \"second\": {...}}\n```\n\n**EXAMPLES OF INCORRECT RESPONSES:**\n- ❌ \"Here are your content ideas: {json...}\"\n- ❌ \"```json\\n{...}\\n```\"\n- ❌ Adding explanations before or after JSON\n- ❌ Using markdown formatting around JSON\n- ❌ Generating fewer than 5 content items\n- ❌ IMAGE_PROMPTS shorter than 100 words\n- ❌ Vague image descriptions like \"professional looking image\"\n\n**IF YOU ADD ANY TEXT OUTSIDE THE JSON STRUCTURE, GENERATE FEWER THAN 5 ITEMS, OR CREATE INSUFFICIENT IMAGE PROMPTS, THE SYSTEM WILL FAIL.**",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        2352,
        336
      ],
      "id": "aea3562d-c887-4f45-8061-78e433edd061",
      "name": "Planner"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"q\": \"specialty coffee trends, ethical coffee beans, home brewing tips, roasted coffee flavor profiles, sustainable coffee sourcing\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1008,
        528
      ],
      "id": "aba0f554-383f-4d91-8cac-04812adcb49e",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsCode": "// The 'items' variable holds the input data from the previous node.\n// It's an array of objects, where each object represents an item in n8n.\n// This code assumes the input will always have at least one item and the expected structure.\nfor (const item of items) {\n  // Access the 'q' property from the 'output' object of the current item.\n  const queryString = item.json.output.q;\n\n  // Split the string by ', ' (comma followed by a space)\n  // Then, map over the resulting array to trim any whitespace from each query.\n  const queries = queryString.split(', ').map(query => query.trim());\n\n  // Transform the array of queries into an array of objects,\n  // where each object represents a single query as a separate item for n8n.\n  // This allows subsequent nodes to process each query individually.\n  const outputItems = queries.map(query => ({\n    json: {\n      query: query // Each query is now under a 'query' key in its own item\n    }\n  }));\n\n  // Return the array of new items.\n  return outputItems;\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1136,
        304
      ],
      "id": "169d5e6d-6b1b-4508-bd7d-547c3e9bfb16",
      "name": "Code1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1328,
        288
      ],
      "id": "f671c092-2e6b-48d1-8900-e3d2189270df",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "mode": "insert",
        "messages": {
          "messageValues": [
            {
              "message": "={{ $('If').all()[0].json.related_queries.toJsonString() }}"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        1888,
        448
      ],
      "id": "7111e8eb-d8b7-48c9-ad73-0b574abb7d97",
      "name": "Chat Memory Manager"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1872,
        288
      ],
      "id": "8834f404-78aa-43dd-9d16-bcb523727eb6",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "903e114a-0567-4367-8e6f-118fd8b10dfa",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1696,
        400
      ],
      "id": "6eb27189-5b02-4e18-b279-ac17678ba77f",
      "name": "If"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        1696,
        112
      ],
      "id": "a08d0fda-62e3-4482-aaac-a258ff378a79",
      "name": "Chat Memory Manager2"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"first\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"content_item_number\": {\n          \"type\": \"number\"\n        },\n        \"theme\": {\n          \"type\": \"string\"\n        },\n        \"IMAGE_PROMPT\": {\n          \"type\": \"string\"\n        },\n        \"CAPTION\": {\n          \"type\": \"string\"\n        },\n        \"HASHTAGS\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"second\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"content_item_number\": {\n          \"type\": \"number\"\n        },\n        \"theme\": {\n          \"type\": \"string\"\n        },\n        \"IMAGE_PROMPT\": {\n          \"type\": \"string\"\n        },\n        \"CAPTION\": {\n          \"type\": \"string\"\n        },\n        \"HASHTAGS\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        2576,
        512
      ],
      "id": "4d9d8625-2a06-42c0-9c9b-431bf8e39d97",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "jsCode": "// The 'items' variable holds the input data from the previous node.\n// It's an array of objects, where each object contains the 'output' key\n// with 'first' and 'second' content items.\nconst outputItems = [];\n\n// Iterate over each item received by this node.\nfor (const item of items) {\n  // Check if the 'output' property exists and has 'first' and 'second' content.\n  if (item.json.output && item.json.output.first) {\n    // Add the 'first' content item to our new array.\n    // We wrap it in a 'json' key as n8n expects this structure for new items.\n    outputItems.push({ json: item.json.output.first });\n  }\n\n  if (item.json.output && item.json.output.second) {\n    // Add the 'second' content item to our new array.\n    outputItems.push({ json: item.json.output.second });\n  }\n}\n\n// Return the new array of flattened content items.\n// Each content item (image prompt, caption, hashtags) will now be a separate item\n// in the n8n workflow, ready for individual processing.\nreturn outputItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2720,
        336
      ],
      "id": "87058c9f-2bff-41bc-a7d6-19aef5001ad0",
      "name": "Code2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2944,
        336
      ],
      "id": "32ddaa7c-30f1-46d1-8672-b2a578c905f8",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-preview-image-generation:generateContent",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "<your-api-key>"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"{{ $json.IMAGE_PROMPT }}\"\n        }\n      ]\n    }\n  ],\n  \"generationConfig\": {\n    \"responseModalities\": [\n      \"TEXT\",\n      \"IMAGE\"\n    ]\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3168,
        496
      ],
      "id": "c35c6890-65e9-44de-8be9-5818aa74b8b4",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "candidates[0].content.parts[1].inlineData.data",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        3344,
        496
      ],
      "id": "e4e1e868-ccba-465a-bf8b-1a3aa46ae4ba",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.upload-post.com/api/upload_photos",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Apikey <your-api-key>"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "user",
              "value": "<account-name>"
            },
            {
              "name": "platform[]",
              "value": "instagram"
            },
            {
              "name": "title",
              "value": "={{ $('Loop Over Items').item.json.IMAGE_PROMPT }}"
            },
            {
              "name": "description",
              "value": "={{ $('Loop Over Items').item.json.CAPTION }}\n{{ $('Loop Over Items').item.json.HASHTAGS }}"
            },
            {
              "parameterType": "formBinaryData",
              "name": "photos[]",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3568,
        496
      ],
      "id": "face8ea5-4b69-47c8-9dc6-874b26c9d659",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "content": "## 4. Instagram posting",
        "height": 368,
        "width": 368
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3488,
        336
      ],
      "typeVersion": 1,
      "id": "981ec967-4c10-4575-b4aa-4c0aafbb064d",
      "name": "Sticky Note4"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Data  Collection",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        []
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini": {
      "ai_languageModel": [
        [
          {
            "node": "Data  Collection",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Memory": {
      "ai_memory": [
        [
          {
            "node": "Data  Collection",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output": {
      "ai_outputParser": [
        [
          {
            "node": "Data  Collection",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Data  Collection": {
      "main": [
        [
          {
            "node": "Enough Data Collected?",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Enough Data Collected?": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Google Trend Search Query Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini ": {
      "ai_languageModel": [
        [
          {
            "node": "Google Trend Search Query Generator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Trend Search Query Generator": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini1": {
      "ai_languageModel": [
        [
          {
            "node": "Planner",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google_trends search": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Planner": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Google Trend Search Query Generator",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Chat Memory Manager2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Google_trends search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Chat Memory Manager2",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory Manager": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Chat Memory Manager",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory Manager2": {
      "main": [
        [
          {
            "node": "Planner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Planner",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f06526bc-553f-42d4-8f21-cb9fe2457204",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "413b6306fb1e0cadc81013b766a1d0334a1f2f01366ca3fde00bf02da66e32ce"
  },
  "id": "kynIVIYEoolw5PKg",
  "tags": []
}